#!/bin/env python
import sys
import os
import argparse

import PIL.Image as pimg

from philter import img_clut_to_cube, img_to_fortified, img_from_fortified, np_gen_hald_pixel_array

DEFAULT_Scale = 8
DEFAULT_Size = 5
DEFAULT_Reps = 3
DEFAULT_Pad = 0.4


def parse_args(exec_path: str, args: list):
    name = os.path.basename(exec_path)
    parser = argparse.ArgumentParser(
        usage="%s [cmd]" % name,
        description="A CLI toolkit for creating LUTss",
    )

    cmd_p = parser.add_subparsers(dest="cmd", title="subcommands")

    # ------------------------------------------------
    cmd = cmd_p.add_parser(
        "gen",
        help="Generate a fotified identity THALD image (somewhat immune to"
             " compression artifacts) which can be used to capture color"
             " transformations."
    )

    cmd.add_argument(
        "-s", "--size", metavar="S", dest="gen_size",
        help="Set size of the target hald.",
        type=int, default=DEFAULT_Size,
    )
    cmd.add_argument(
        "-x", "--scale", metavar="S", dest="gen_scale",
        help="Set scale multiplier of the target hald.",
        type=int, default=DEFAULT_Scale,
    )
    cmd.add_argument(
        "-r", "--reps", metavar="N", dest="gen_reps",
        help="Set repeat grid size NxN.",
        type=int, default=DEFAULT_Reps,
    )

    cmd.add_argument(
        metavar="NAME", dest="gen_name",
        help="Set name for the output file.",
        nargs="?", type=str, default="hald_identity",
    )

    # ------------------------------------------------
    cmd = cmd_p.add_parser(
        "clut",
        help="Generate CLUT image and CUBE map file from a fortified THALD image."
    )

    cmd.add_argument(
        "-s", "--size", metavar="S", dest="clut_size",
        help="Set size of the hald.",
        type=int, default=DEFAULT_Size,
    )
    cmd.add_argument(
        "-x", "--scale", metavar="S", dest="clut_scale",
        help="Set scale multiplier of the hald.",
        type=int, default=DEFAULT_Scale,
    )
    cmd.add_argument(
        "-r", "--reps", metavar="N", dest="clut_reps",
        help="Set repeat grid size NxN.",
        type=int, default=DEFAULT_Reps,
    )

    cmd.add_argument(
        metavar="THALD", dest="clut_iname",
        help="Path to the transformed hald.",
        type=str,
    )
    cmd.add_argument(
        metavar="NAME", dest="clut_name",
        help="Set name for the output file.",
        nargs="?", type=str, default="",
    )

    # ------------------------------------------------
    cmd = cmd_p.add_parser(
        "cube",
        help="Generate CUBE file from a non fortified HALD image."
    )
    cmd.add_argument(
        metavar="THALD", dest="cube_iname",
        help="Path to the clut hald.",
        type=str,
    )
    cmd.add_argument(
        metavar="NAME", dest="cube_name",
        help="Set name for the output file.",
        nargs="?", type=str, default="",
    )

    return parser, parser.parse_args(args)


def main(args: list):
    padding = DEFAULT_Pad

    p, a = parse_args(args[0], args[1:])
    if a.cmd == "gen":
        cmd_gen(a.gen_size, a.gen_scale, padding, a.gen_reps, a.gen_name)
    elif a.cmd == "clut":
        cmd_norm(a.clut_scale, padding, a.clut_reps, a.clut_iname, a.clut_name)
    elif a.cmd == "cube":
        cmd_cube(a.cube_iname, a.cube_name)


def cmd_gen(size, scale, padding, reps, name):
    # STEP 1: Construct Image array:
    hald_pixels = np_gen_hald_pixel_array(size)
    hald_img = pimg.fromarray(hald_pixels)

    # STEP 2: Make Hald more resistant to artifacts:
    hald_img = img_to_fortified(hald_img, scale, padding, reps)

    # STEP 3: Done
    image_output_path = os.path.abspath("%s.%s.png" % (name, size))
    hald_img.save(image_output_path, format='png')
    print("GENERATED: %s" % image_output_path)


def cmd_norm(scale, padding, reps, in_name, out_name):
    thald_img = pimg.open(in_name)

    if len(out_name) == 0:
        in_name_root, _ = os.path.splitext(in_name)
        out_name = os.path.join("%s_clut" % (in_name_root))
    elif os.path.isdir(out_name):
        in_name_root, _ = os.path.splitext(os.path.basename(in_name))
        out_name = os.path.join(out_name, "%s_clut" % in_name_root)


    image_output_path = os.path.abspath("%s.png" % out_name)
    hald_img = img_from_fortified(thald_img, scale, padding, reps, fast=False)
    hald_img.save(image_output_path, format='png')
    print("GENERATED: %s" % image_output_path)

    cubemap_output_path = os.path.abspath("%s.cube" % out_name)
    cube_str = img_clut_to_cube(hald_img)
    with open(cubemap_output_path, "w") as f:
        f.write(cube_str)
    print("GENERATED: %s" % cubemap_output_path)


def cmd_cube(in_name, out_name):
    clut_img = pimg.open(in_name)

    if len(out_name) == 0:
        in_name_root, _ = os.path.splitext(in_name)
        out_name = os.path.join("%s_clut" % (in_name_root))
    elif os.path.isdir(out_name):
        in_name_root, _ = os.path.splitext(os.path.basename(in_name))
        out_name = os.path.join(out_name, "%s_clut" % in_name_root)

    cube_str = img_clut_to_cube(clut_img)
    with open("%s.cube" % (out_name), "w") as f:
        f.write(cube_str)


if __name__ == '__main__':
    main(sys.argv)
